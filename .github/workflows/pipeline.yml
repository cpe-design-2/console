on: [push, pull_request]

jobs:
  build:
    # The host should always be linux
    runs-on: ubuntu-20.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Enable Cargo caching
        uses: Swatinem/rust-cache@v2

      - name: Build artifact  
        uses: uraimo/run-on-arch-action@v2
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --platform linux/arm64/v8

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}
            RUST_BACKTRACE: 1

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y git curl build-essential pkg-config cmake libfontconfig1-dev libfontconfig
            curl https://sh.rustup.rs -sSf | sh -s -- -y

          # Produce a binary artifact and place it in the mounted volume
          run: |
            source "$HOME/.cargo/env"
            cp $(which git) "/artifacts/${artifact_name}"
            echo "Produced artifact at /artifacts/${artifact_name}"
            rustc --version --verbose
            ldd --version
            echo ${PWD}
            cargo t --release
            cargo b --release
            cp ./target/release/goco "/artifacts/goco"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: goco
          path: ./artifacts/goco
          if-no-files-found: error
  
  pack:
    needs: [build]
    runs-on: ubuntu-latest
    name: Package artifact
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: goco

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set environment variables
        run: echo "GOCO_PKG_NAME=goco-$(git describe --abbrev=0 --tags --always)-aarch-linux" >> $GITHUB_ENV

      - name: Create package structure
        run: |
          mkdir ${{ env.GOCO_PKG_NAME }}
          mkdir ${{ env.GOCO_PKG_NAME }}/bin
          mkdir ${{ env.GOCO_PKG_NAME }}/assets

      - name: Copy contents into package
        run: |
          cp ./goco ${{ env.GOCO_PKG_NAME }}/bin/goco
          cp -R ./assets/ {{ env.GOCO_PKG_NAME }}/assets
          cp ./install.sh {{ env.GOCO_PKG_NAME }}/install.sh
          cp ./LICENSE {{ env.GOCO_PKG_NAME }}/LICENSE

      - name: Archive the package
        run: tar -czf ${{ env.GOCO_PKG_NAME }}.zip ${{env.GOCO_PKG_NAME }}

      - name: Upload the archived package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GOCO_PKG_NAME }}
          path: ${{ env.GOCO_PKG_NAME }}.zip
          if-no-files-found: error

          